<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="store.csolved.csolved.domain.bookmark.mapper.BookmarkMapper">
    <resultMap id="bookmarkResultMap" type="store.csolved.csolved.domain.post.mapper.record.PostCard">
        <id property="id" column="id"/>
        <result property="postId" column="post_id"/>
        <result property="postType" column="post_type"/>
        <result property="title" column="title"/>
        <result property="anonymous" column="anonymous"/>
        <result property="authorId" column="author_id"/>
        <result property="authorNickname" column="author_nickname"/>
        <result property="categoryId" column="categoryId"/>
        <result property="categoryName" column="category_name"/>
        <result property="views" column="views"/>
        <result property="likes" column="likes"/>
        <result property="answerCount" column="answer_count"/>
        <collection property="tags" ofType="store.csolved.csolved.domain.tag.Tag">
            <id property="id" column="tag_id"/>
            <result property="name" column="tag_name"/>
        </collection>
    </resultMap>

    <insert id="saveBookmark">
        insert into bookmarks(user_id, post_id)
        values (#{userId}, #{postId});
    </insert>

    <delete id="deleteBookmark">
        delete
        from bookmarks
        where user_id = #{userId}
          and post_id = #{postId};
    </delete>

    <select id="getBookmarks" resultMap="bookmarkResultMap">
        select sub.id         id,
               sub.post_id    post_id,
               p.post_type    post_type,
               p.title        title,
               p.anonymous    anonymous,
               sub.author_id  author_id,
               u.nickname     author_nickname,
               c.id           category_id,
               c.name         category_name,
               p.views        views,
               p.likes        likes,
               p.answer_count answer_count,
               t.id           tag_id,
               t.name         tag_name
        from (select b.id      id,
                     b.post_id post_id,
                     b.user_id author_id
              from bookmarks b
              where b.user_id = #{userId}
              order by b.created_at desc
              limit #{page.offset}, #{page.size}) sub
                 left join posts p on p.id = sub.post_id
                 left join users u on u.id = sub.author_id
                 left join category c on c.id = p.category_id
                 left join post_tags pt on p.id = pt.post_id
                 left join tags t on pt.tag_id = t.id;
    </select>

    <select id="countBookmarks">
        select count(b.id)
        from bookmarks b
        where user_id = #{userId};
    </select>

    <select id="hasBookmarked">
        select exists (select 1
                       from bookmarks
                       where user_id = #{userId}
                         and post_id = #{postId});
    </select>

</mapper>