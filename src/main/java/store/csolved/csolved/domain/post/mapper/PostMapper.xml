<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="store.csolved.csolved.domain.post.mapper.PostMapper">

    <!-- 게시글 -->
    <resultMap id="postDetailResultMap" type="store.csolved.csolved.domain.post.mapper.record.PostDetailRecord">
        <id property="id" column="id"/>
        <result property="title" column="title"/>
        <result property="authorId" column="author_id"/>
        <result property="authorNickname" column="author_nickname"/>
        <result property="anonymous" column="anonymous"/>
        <result property="content" column="content"/>
        <result property="categoryId" column="category_id"/>
        <result property="categoryName" column="category_name"/>
        <result property="views" column="views"/>
        <result property="likes" column="likes"/>
        <result property="answerCount" column="answer_count"/>
        <result property="createdAt" column="created_at"/>
        <result property="modifiedAt" column="modified_at"/>
        <collection property="tags" ofType="store.csolved.csolved.domain.tag.Tag">
            <id property="id" column="tag_id"/>
            <result property="name" column="tag_name"/>
        </collection>
    </resultMap>

    <!-- 게시글 카드 -->
    <resultMap id="postCardResultMap" type="store.csolved.csolved.domain.post.mapper.record.PostCardRecord">
        <id property="id" column="id"/>
        <result property="postId" column="post_id"/>
        <result property="postType" column="post_type"/>
        <result property="title" column="title"/>
        <result property="anonymous" column="anonymous"/>
        <result property="authorId" column="author_id"/>
        <result property="authorNickname" column="author_nickname"/>
        <result property="categoryId" column="category_id"/>
        <result property="categoryName" column="category_name"/>
        <result property="createdAt" column="created_at"/>
        <result property="views" column="views"/>
        <result property="likes" column="likes"/>
        <result property="answerCount" column="answer_count"/>
        <collection property="tags" ofType="store.csolved.csolved.domain.tag.Tag">
            <id property="id" column="tag_id"/>
            <result property="name" column="tag_name"/>
        </collection>
    </resultMap>

    <insert id="savePost" useGeneratedKeys="true" keyProperty="post.id">
        insert into posts(post_type, user_id, anonymous, title,
                          content, category_id)
        values (#{postType}, #{post.authorId}, #{post.anonymous},
                #{post.title}, #{post.content},
                #{post.categoryId});
    </insert>

    <update id="updatePost">
        update posts
        set anonymous   = #{post.anonymous},
            title       = #{post.title},
            content     = #{post.content},
            category_id = #{post.categoryId},
            modified_at = current_timestamp
        where id = #{communityId};
    </update>

    <update id="deletePost">
        update posts
        set deleted_at = current_timestamp
        where id = #{communityId};
    </update>

    <select id="getPost" resultMap="postDetailResultMap">
        select p.id           id,
               p.title        title,
               p.anonymous    anonymous,
               p.content      content,
               p.views        views,
               p.likes        likes,
               p.answer_count answer_count,
               p.created_at   created_at,
               p.modified_at  modified_at,
               u.id           author_id,
               u.nickname     author_nickname,
               c.id           category_id,
               c.name         category_name,
               t.id           tag_id,
               t.name         tag_name
        from posts p
                 left join users u on p.user_id = u.id
                 left join category c on p.category_id = c.id
                 left join post_tags pt on p.id = pt.post_id
                 left join tags t on t.id = pt.tag_id
        where p.id = #{postId}
          and p.deleted_at is null;
    </select>

    <select id="getPosts" resultMap="postCardResultMap">
        SELECT
        sub.post_id id,
        sub.title title,
        sub.anonymous anonymous,
        sub.author_id author_id,
        sub.author_nickname author_nickname,
        sub.views views,
        sub.likes likes,
        sub.answer_count answer_count,
        sub.created_at created_at,
        sub.modified_at modified_at,
        c.id category_id,
        c.name category_name,
        t.id tag_id,
        t.name tag_name
        FROM (
        SELECT
        p.id post_id,
        p.title title,
        p.anonymous anonymous,
        p.user_id author_id,
        u.nickname author_nickname,
        p.category_id category_id,
        p.views views,
        p.likes likes,
        p.answer_count answer_count,
        p.created_at created_at,
        p.modified_at modified_at
        FROM posts p
        LEFT JOIN users u on u.id = p.user_id
        WHERE p.deleted_at IS NULL
        AND p.post_type = #{postType}
        <if test="filterType == 'CATEGORY' and filterValue != null and filterValue != 0">
            AND p.category_id = #{filterValue}
        </if>
        <if test="searchType == 'TITLE' and searchKeyword != null and searchKeyword != ''">
            AND p.title LIKE concat('%', #{searchKeyword}, '%')
        </if>
        <if test="searchType == 'AUTHOR' and searchKeyword != null and searchKeyword != ''">
            AND u.nickname LIKE concat('%',#{searchKeyword},'%')
            AND p.anonymous IS FALSE
        </if>
        ORDER BY
        <if test="sortType == 'RECENT'">p.created_at DESC</if>
        <if test="sortType == 'VIEWS'">p.views DESC</if>
        <if test="sortType == 'LIKES'">p.likes DESC</if>
        <if test="sortType == 'ANSWERS'">p.answer_count DESC</if>
        LIMIT #{offset}, #{size}
        ) sub
        LEFT JOIN category c ON c.id = sub.category_id
        LEFT JOIN post_tags pt ON pt.post_id = sub.post_id
        LEFT JOIN tags t ON t.id = pt.tag_id;
    </select>

    <select id="countPosts">
        select count(p.id)
        from posts p
        left join category c on p.category_id = c.id
        left join users u on p.user_id = u.id
        where p.deleted_at is null and p.post_type = #{postType}
        <if test="filterType == 'category' and filterValue != null and filterValue != 0">
            and p.category_id = #{filterValue}
        </if>
        <choose>
            <when test="searchType == 'TITLE' and searchKeyword != null and searchKeyword != ''">
                and p.title like concat('%', #{searchKeyword}, '%')
            </when>
            <when test="searchType == 'AUTHOR' and searchKeyword != null and searchKeyword != ''">
                and u.nickname like concat('%',#{searchKeyword},'%')
                and p.anonymous is false
            </when>
        </choose>
    </select>

    <select id="getAuthorId">
        select user_id
        from posts
        where id = #{communityId};
    </select>

    <select id="hasUserLiked">
        select exists(select 1
                      from post_likes
                      where user_id = #{authorId}
                        and post_id = #{communityId});
    </select>

    <update id="increaseLikes">
        update posts
        set likes = likes + 1
        where id = #{communityId};
    </update>

    <insert id="addUserLike">
        insert into post_likes(post_id, user_id)
        values (#{communityId}, #{authorId});
    </insert>

    <update id="increaseView">
        update posts
        set views = views + 1
        where id = #{communityId};
    </update>

    <!-- 댓글 단 게시글들 조회 -->
    <select id="getRepliedPosts" resultMap="postCardResultMap">
        SELECT p.id           id,
               p.post_type    post_type,
               p.id           post_id,
               p.title        title,
               p.anonymous    anonymous,
               p.user_id      author_id,
               u.nickname     author_nickname,
               c.id           category_id,
               c.name         category_name,
               p.views        views,
               p.likes        likes,
               p.answer_count answer_count,
               t.id           tag_id,
               t.name         tag_name
        FROM (SELECT DISTINCT post_id
              FROM ((SELECT a.post_id
                     FROM answers a
                     WHERE author_id = #{userId}
                       AND deleted_at IS NULL)
                    UNION
                    (SELECT c.post_id
                     FROM comments c
                     WHERE author_id = #{userId}
                       AND deleted_at IS NULL)) AS user_activities
              ORDER BY post_id
              LIMIT #{page.offset}, #{page.size}) AS paginated_posts
                 JOIN posts p ON p.id = paginated_posts.post_id
                 JOIN users u ON u.id = p.user_id
                 JOIN category c ON c.id = p.category_id
                 LEFT JOIN post_tags pt ON pt.post_id = p.id
                 LEFT JOIN tags t ON t.id = pt.tag_id;
    </select>

    <!-- 댓글 단 게시글 개수 조회 -->
    <select id="countRepliedPosts">
        SELECT COUNT(*)
        FROM ((SELECT a.post_id
               FROM answers a
               WHERE author_id = #{userId}
                 AND deleted_at IS NULL)
              UNION
              (SELECT c.post_id
               FROM comments c
               WHERE author_id = #{userId}
                 AND deleted_at IS NULL)) reply_count;
    </select>

    <!-- 내가 작성한 게시글 조회 -->
    <select id="getUserPosts" resultMap="postCardResultMap">
        SELECT up.id           id,
               up.post_type    post_type,
               up.id           post_id,
               up.title        title,
               up.anonymous    anonymous,
               up.author_id    author_id,
               u.nickname      author_nickname,
               up.category_id  category_id,
               c.name          category_name,
               up.views        views,
               up.likes        likes,
               up.answer_count answer_count,
               t.id            tag_id,
               t.name          tag_name
        from (select p.id           id,
                     p.post_type    post_type,
                     p.title        title,
                     p.anonymous    anonymous,
                     p.user_id      author_id,
                     p.category_id  category_id,
                     p.views        views,
                     p.likes        likes,
                     p.answer_count answer_count
              from posts p
              where p.user_id = #{userId}
                and p.deleted_at is null
              limit #{page.offset}, #{page.size}) up
                 left join users u on up.author_id = u.id
                 left join category c on up.category_id = c.id
                 left join post_tags pt on pt.post_id = up.id
                 left join tags t on t.id = pt.tag_id
        order by up.id desc;
    </select>

    <!-- 내가 쓴 게시글 개수 조회 -->
    <select id="countUserPosts">
        select count(p.id)
        from posts p
        where p.user_id = #{userId}
          and deleted_at is null;
    </select>
</mapper>